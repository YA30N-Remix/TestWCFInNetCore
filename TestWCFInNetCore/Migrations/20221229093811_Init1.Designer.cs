// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestWCFInNetCore.Models;

#nullable disable

namespace TestWCFInNetCore.Migrations
{
    [DbContext(typeof(ERPContext))]
    [Migration("20221229093811_Init1")]
    partial class Init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminSubSystemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FormNameFa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminSubSystemId" }, "IX_AdminForms_AdminSubSystemId");

                    b.ToTable("AdminForms");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleNameFa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleName" }, "IX_AdminRoles_RoleName")
                        .IsUnique();

                    b.ToTable("AdminRoles");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminSubSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("SubSystemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubSystemNameFarsi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdminSubSystems");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("EmpemployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPEmployeeId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmpemployeeId" }, "IX_AdminUsers_EMPEmployeeId");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("AdminUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminRoleId" }, "IX_AdminUserRoles_AdminRoleId");

                    b.HasIndex(new[] { "AdminUserId" }, "IX_AdminUserRoles_AdminUserId");

                    b.ToTable("AdminUserRoles");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Carcartable", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("float");

                    b.Property<int?>("CarcartableTraceId")
                        .HasColumnType("int")
                        .HasColumnName("CARCartableTraceId");

                    b.Property<short>("ConfirmType")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("EmpemployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPEmployeeId");

                    b.Property<string>("FieldCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RequestDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SignDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CarcartableTraceId" }, "IX_CARCartables_CARCartableTraceId");

                    b.HasIndex(new[] { "EmpemployeeId" }, "IX_CARCartables_EMPEmployeeId");

                    b.ToTable("CARCartables", (string)null);
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.CarcartableTrace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("CartableId")
                        .HasColumnType("int")
                        .HasColumnName("CARTableId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("SignTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SignTitleFa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminRoleId" }, "IX_CARCartableTraces_AdminRoleId");

                    b.HasIndex(new[] { "CartableId" }, "IX_CARCartableTraces_CARTableId");

                    b.ToTable("CARCartableTraces", (string)null);
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Cartable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminFormId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminFormId" }, "IX_CARTables_AdminFormId");

                    b.ToTable("CARTables", (string)null);
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Empemployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EmpoloyeeNo")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("HireDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdentifyNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ImaghePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LeaveDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmpoloyeeNo" }, "IX_EMPEmployees_EmpoloyeeNo")
                        .IsUnique();

                    b.HasIndex(new[] { "NationalCode" }, "IX_EMPEmployees_NationalCode")
                        .IsUnique();

                    b.ToTable("EMPEmployees", (string)null);
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.InOutRequestLeaf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("EmpemployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPEmployeeId");

                    b.Property<string>("FromDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("LeaveDay")
                        .HasColumnType("int");

                    b.Property<string>("LeaveReason")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LeaveTime")
                        .HasColumnType("int");

                    b.Property<short>("LeaveType")
                        .HasColumnType("smallint");

                    b.Property<string>("RequestDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short>("RequestLeaveType")
                        .HasColumnType("smallint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("TimeLeaveDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ToDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmpemployeeId" }, "IX_InOutRequestLeaves_EMPEmployeeId");

                    b.ToTable("InOutRequestLeaves");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.ServRequestService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("EmpemployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPEmployeeId");

                    b.Property<string>("RequestDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short>("RequestServiceType")
                        .HasColumnType("smallint");

                    b.Property<string>("ServicesOrGoods")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmpemployeeId" }, "IX_ServRequestServices_EMPEmployeeId");

                    b.ToTable("ServRequestServices");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionUser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminUserId" }, "IX_Sessions_AdminUserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminForm", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.AdminSubSystem", "AdminSubSystem")
                        .WithMany("AdminForms")
                        .HasForeignKey("AdminSubSystemId");

                    b.Navigation("AdminSubSystem");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminUser", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.Empemployee", "Empemployee")
                        .WithMany("AdminUsers")
                        .HasForeignKey("EmpemployeeId");

                    b.Navigation("Empemployee");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminUserRole", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.AdminRole", "AdminRole")
                        .WithMany("AdminUserRoles")
                        .HasForeignKey("AdminRoleId");

                    b.HasOne("TestWCFInNetCore.Models.AdminUser", "AdminUser")
                        .WithMany("AdminUserRoles")
                        .HasForeignKey("AdminUserId");

                    b.Navigation("AdminRole");

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Carcartable", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.CarcartableTrace", "CarcartableTrace")
                        .WithMany("Carcartables")
                        .HasForeignKey("CarcartableTraceId");

                    b.HasOne("TestWCFInNetCore.Models.Empemployee", "Empemployee")
                        .WithMany("Carcartables")
                        .HasForeignKey("EmpemployeeId");

                    b.Navigation("CarcartableTrace");

                    b.Navigation("Empemployee");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.CarcartableTrace", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.AdminRole", "AdminRole")
                        .WithMany("CarcartableTraces")
                        .HasForeignKey("AdminRoleId");

                    b.HasOne("TestWCFInNetCore.Models.Cartable", "Cartable")
                        .WithMany("CarcartableTraces")
                        .HasForeignKey("CartableId");

                    b.Navigation("AdminRole");

                    b.Navigation("Cartable");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Cartable", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.AdminForm", "AdminForm")
                        .WithMany("Cartables")
                        .HasForeignKey("AdminFormId");

                    b.Navigation("AdminForm");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.InOutRequestLeaf", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.Empemployee", "Empemployee")
                        .WithMany("InOutRequestLeaves")
                        .HasForeignKey("EmpemployeeId");

                    b.Navigation("Empemployee");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.ServRequestService", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.Empemployee", "Empemployee")
                        .WithMany("ServRequestServices")
                        .HasForeignKey("EmpemployeeId");

                    b.Navigation("Empemployee");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Session", b =>
                {
                    b.HasOne("TestWCFInNetCore.Models.AdminUser", "AdminUser")
                        .WithMany("Sessions")
                        .HasForeignKey("AdminUserId");

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminForm", b =>
                {
                    b.Navigation("Cartables");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminRole", b =>
                {
                    b.Navigation("AdminUserRoles");

                    b.Navigation("CarcartableTraces");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminSubSystem", b =>
                {
                    b.Navigation("AdminForms");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.AdminUser", b =>
                {
                    b.Navigation("AdminUserRoles");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.CarcartableTrace", b =>
                {
                    b.Navigation("Carcartables");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Cartable", b =>
                {
                    b.Navigation("CarcartableTraces");
                });

            modelBuilder.Entity("TestWCFInNetCore.Models.Empemployee", b =>
                {
                    b.Navigation("AdminUsers");

                    b.Navigation("Carcartables");

                    b.Navigation("InOutRequestLeaves");

                    b.Navigation("ServRequestServices");
                });
#pragma warning restore 612, 618
        }
    }
}
